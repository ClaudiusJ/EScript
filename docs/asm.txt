push (Obj) Obj
push (Bool) Bool
push (Int) Int
...
push (Identifier) Identifier

return -


pop  -
	remove entry from stack

dup -
	push topmost entry on stack

call numParams
	pop numParams * parameters
	pop function
	pop object
	call the function
	push result (or jump to exception point)

	
getAttribute Identifier
	pop Object
	push Object.Identifier (or NULL + Warning)
	
getVar Identifier
	if local.Identifier -> push (local.Identifier) // only temporary!!!!!!!
	else if this.Identifier -> push (this.Identifier)
	else push (GLOBALS.Identifier) (or NULL + Warning) 

findVar Identifier
	if local.Identifier -> push (NULL, local.Identifier) // only temporary!!!!!!!
	else if this.Identifier -> push (this, this.Identifier)
	else push (GLOBALS, GLOBALS.Identifier) (or NULL,NULL + Warning) 


jumpOnFalse marker
	pop value
	if value.toBool() == false --> jmp marker

jumpOnTrue marker
	pop value
	if value.toBool() == true --> jmp marker

not
	pop obj
	push !(obj.toBool())

setRegister $1

jmp
jmpIfTrue
jmpIfFalse

initLocal Identifier

---------------------------------------------------
FunctionCall & GetAttribute

out("Hello HasE!");

findVar 'out'  // push obj & result
[NULL,FUN]

push (String) "Hello HasE!"
[NULL, FUN,"Hello HasE!"] 

call 1 // one parameter
[ NULL ]

pop
[]



----------
7+8; => 7.+(8)

[]
push 7
[7]

dup
[7,7]

getAttribute '+'  
[7,FUN]

push (Number) 8
[7,FUN,8]

call 1

[15]

pop
[]

------------------

a.b();

getVar 'a'
[a]
dup
[a,a]
getAttribute 'b'
[a,FUN]

call 0
------------------
a.b.c();

getVar 'a'
[a]
getAttribute 'b'
[b]
dup
[b,b]
getAttribute 'c'
[b,FUN]

call 0
------------------

a+b;

getVar 'a'
[a]
dup
[a,a]
getAttribute '+'
[a,FUN]

getVar 'b'
[a,FUN,b] 

call 1
------------------

(a.b())();

[]
push NULL
[NULL]
getVar 'a'
[NULL,a]
dup
[NULL,a,a]
getAttribute 'b'
[NULL,a,b]
call 0
[NULL,result]
call 0
[result2]
pop
[]

---------------------------------------------------
Jumps

if(true) "yes";

[]
push true
[true]
jumpOnFalse marker1:
[]
push "yes"
["yes"]
pop
[]
marker1:
[]

------------------

if(a) "yes";
else if( b ) ;
else "no";

[]
getVar 'a'
[a]
jumpOnFalse marker1:
[]
getVar 'b'
[b]
jumpOnFalse marker2:
[]
jmp marker3:
marker2:
push "no";
["no"]
pop;
[]

marker1:
marker3:
[]


------------------

a && b;

	getVar 'a'
		[a]
	jmpOnFalse false1:
		[]
	getVar 'b'
		[b]
	jmpOnFalse false1:
		[]
	push true
		[true]
	jmp end1:
		[true]
false1:
	push false
		[false]
end1:
	pop
		[]
		

------------------

a || b;

	getVar 'a'
		[a]
	jmpOnTrue true1:
		[]
	getVar 'b'
		[b]
	jmpOnTrue true1:
		[]
	push false
		[false]
	jmp end1:
		[false]
true1:
	push true
		[true]
end1:
	pop
		[]

------------------

!a;


	getVar 'a'
		[a]
	not
		[Bool]


------------------

var a = 1;
{
var b = 2;
}


	// init $0,$1
	push (Number) 1
	[1]
	dup
	[1,1]
	assignLocal $0
	[1]
	pop
	[]
	
	
	push (Number) 2
	[2]
	dup
	[2,2]
	assignLocal $1
	[1]
	pop
	[]
	reset $1
	
	reset $0


------------------
var a = var b = 2;

	push (Number) 2
	[2]
	dup
	[2,2]
	assignLocal $1
	[2]
	dup
	[2,2]
	assignLocal $0
	[2]
	pop
	[]
	reset $0
	reset $1


------------------
a = var b;

	getLocalVar $0
	[b]
	dup
	[b,b]
	assignVariable 'a'    // opt: findAndAssign 'a'
	[b]
	pop
	[]
	reset $0
	
------------------
a.b = 5;

	push (Number) 5
	[5]
	dup
	[5,5]
	getVar 'a'
	[5,5,a]
	assignAttribute 'b'
	[5]
	pop
	[]
	
------------------
foo().b = true;

	push (Bool) true
	[true]
	dup
	[true,true]
	findVar 'foo'
	[true,true,NULL,foo]
	call 0
	[true,true,result]
	assign 'b'
	[true]
	pop
	[]
	
------------------
a.b := true;

	push (Bool) true
	[true]
	dup
	[true,true]
	getVar 'a'
	[true,true,a]
	push (uint) 0 // properties
	[true,true,a,0]
	setAttribute 'b'
	[true]
	pop
	[]
	
------------------
while(true);

loopCond:
	push true
	[true]
	jmpOnFalse loopEnd:
	[]
	
	jmp loopCond:
loopEnd:

------------------
for(var i=0;i<10;++i){
	var a = i;
}
	push (Number) 0
		[0]
	dup
		[0,0]
	assignLocal $0
		[0]
	pop
		[]
loopBegin1:
	getLocalVar $0
		[i]
	dup
		[i,i]
	getAttribute(2) '<'
		[i,FUN]
	push (Number) 10
		[i,FUN,10]
	call 1
		[result]
	jmpOnFalse loopEnd2:
		[]
	getLocalVar $0
		[i]
	dup
		[i,i]
	assignLocal $1
		[i]
	pop
		[]
	reset $1

	getLocalVar $0
		[i]
	dup
		[i,i]
	getAttribute(2) '++_pre'
		[i,FUN]
	call 0
		[result]
	pop
		[]
	jmp loopBegin1:
		[]
loopEnd2:
	reset $0
	

------------------
foreach(arr as var key,var value){
	value;
}

---------------------------------------------------
todo


foreach

[] {,}
continue
break
conditionalExpr
return
try
catch
throw



a+B.b;

[]
getVar 'a'
[a]
dup
[a,a]
getAttribute '+'
[a,FUN]

getVar 'B'
[a,FUN,B] 

getAttribute 'b'
[a,FUN,b] 

call 1
[result]
pop
[]

------------------
{
var a = 5;
}

init $a
[]
push (Number) 5
[5]
assignVar $a
[5]
pop
[]

------------------
GLOBALS.out();

[]
getVar 'GLOBALS' // push NULL, push result
[GLOBALS]
dup
[GLOBALS,GLOBALS]

getAttribute 'out'  // pop obj,push result
[GLOBALS,out]

call 0 // pop params,pop fun,pop caller, push result
[NULL]
pop 
[]
------------------

A.B.C.d = 5;
[]
getVar 'A' // push result
[A]

getAttribute 'B'  // pop obj,push result
[B]

getAttribute 'C'  
[C]

push (Number) 5
[C,5]

assignAttr 'd'  // pop value,pop obj,assign,push value
[5]

pop 
[]
------------------

if( a>b ) // a.'>'(b)
	out(a);
else 
	out(b);

[]
getVar 'a' 
[a]

dup
[a,a]

getAttribute '>'  
[a,FUN]

getVar 'b' 
[a,FUN,b]

call 1
[result]

jmpOnFalse marker1:
[]

findVar 'out'
[NULL,FUN]

getVar 'a'
[NULL,FUN,a]

call 1
[NULL]
pop
[]
jmp marker2:

---
marker1:

findVar 'out'
[NULL,FUN]

getVar 'b'
[NULL,FUN,b]

call 1
[NULL]
pop
[]
marker2:

----------

(A.a())()

push NULL
[NULL]

getVar 'A'
[NULL,A]

dup
[NULL,A,A]

getAttribute 'a'
[NULL,A,a]

call 0
[NULL,result]

call 0
[result2]

pop
[]


---------------------------------




stack functions:
_extractNumber
_extractIdentifier

