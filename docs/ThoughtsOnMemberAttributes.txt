// !!!!!!!!!!!!!!!!!!!PLEASE IGNORE!!!!!!!!!!!!!!!!!

var A = new Type();

A.SOME_CONSTANT<const> ::= $SOME_CONSTANT;

A._constructor<private> ::= fn(){	};

A.privateObjMember<private> := 1;

A.privateTypeMember<private> ::= 2;

A.fixedType<sameType> := "";

A.getMember ::= fn(){
	return privateObjMember;
};

A.createInstance ::= fn(){
	var a = new this();
	
	// exception:
	// a.privateObjMember = privateTypeMember;
	(a->fn(){
		this.privateObjMember = privateTypeMember;
	})();
};


// exception: reading private A._constructor
var a = new A();

var a = A.createInstance();

// exception: writing const
A.SOME_CONSTANT = foo;

// exception: writing private
a.fixedType = 2;

// exception: reading private
a.privateObjMember;

// exception: reading private: otherA.privateObjMember
(a->fn(otherA){	return this.privateObjMember + otherA.privateObjMember;	})( A.createInstance() );


// ---------------------
var B = new Type(A);

B._constructor ::= fn().(){
};

// exception: reading private A._constructor
new B();

